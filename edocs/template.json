{
  "construct": "function(design_doc, template_doc) {\n  this.ddoc = design_doc;\n  this.tdoc = template_doc;\n}", 
  "edoc__id": "template", 
  "edoc_couchapp": {
    "manifest": [
      "construct.js", 
      "env.json", 
      "methods/", 
      "methods/render.js", 
      "template.js"
    ], 
    "objects": {}, 
    "signatures": {}
  }, 
  "env": {
    "page": {
      "name": "template", 
      "title": "Template"
    }, 
    "script": {
      "build_module": true, 
      "className": "Template", 
      "commonjs": true, 
      "methods": {
        "render": true
      }
    }
  }, 
  "methods": {
    "render": "function(doc) {\n  var _ = this.ddoc.edoc_modules.underscore,\n    mustache = this.ddoc.edoc_modules.mustache,\n    ctx = {};\n  \n  if (typeof _ !== \"function\") _ = _.underscore;\n  \n  _.each(this.tdoc.vars, function(value, key) {\n    ctx[key] = value.default || value.placeholder;\n  }, this);\n  _.each(this.tdoc.vars, function(value, key) {\n    if (value.default_to) {\n      ctx[key] = ctx[value.default_to];\n    }\n  }, this);\n  \n  var disp_doc = _.clone(doc);\n  delete disp_doc['_revisions'];\n  \n  var extract_multiline = function(path, obj, multiline) {\n    _.each(obj, function(val, key) {\n      if (_.isString(val)) {\n        if (val.indexOf(\"\\n\") !== -1) {\n          multiline.push({\"path\": path.concat(key).join(\".\"), \"str\": val});\n          obj[key] = \"$ref: \" + path.concat(key).join(\".\");\n        }\n      } else if (! _.isEmpty(val)) {\n        extract_multiline(path.concat(key), val, multiline);\n      }\n    }, this);\n  }\n  \n  var path = [], multiline = [];\n  extract_multiline(path, disp_doc, multiline);\n  var json = JSON.stringify(disp_doc, null, 2);\n  _.extend(ctx, {\n    \"title\": doc.env.page.title,\n    \"json\": json,\n    \"multiline\": multiline\n  });\n\n  ctx.inline_styles = mustache.to_html(this.tdoc.styles, ctx);\n  return mustache.to_html(this.tdoc.page, ctx);\n}"
  }, 
  "template": ";(function() {\n  var Template = function(design_doc, template_doc) {\n    this.ddoc = design_doc;\n    this.tdoc = template_doc;\n  };\n  \n  if (exports) {\n    exports.Template = Template;\n  } else {\n    this.template = {};\n    this.template.Template = Template;\n  }\n  \n  Template.prototype = {\n    \"render\": function(doc) {\n      var _ = this.ddoc.edoc_modules.underscore,\n        mustache = this.ddoc.edoc_modules.mustache,\n        ctx = {};\n      \n      if (typeof _ !== \"function\") _ = _.underscore;\n      \n      _.each(this.tdoc.vars, function(value, key) {\n        ctx[key] = value.default || value.placeholder;\n      }, this);\n      _.each(this.tdoc.vars, function(value, key) {\n        if (value.default_to) {\n          ctx[key] = ctx[value.default_to];\n        }\n      }, this);\n      \n      var disp_doc = _.clone(doc);\n      delete disp_doc['_revisions'];\n      \n      var extract_multiline = function(path, obj, multiline) {\n        _.each(obj, function(val, key) {\n          if (_.isString(val)) {\n            if (val.indexOf(\"\\n\") !== -1) {\n              multiline.push({\"path\": path.concat(key).join(\".\"), \"str\": val});\n              obj[key] = \"$ref: \" + path.concat(key).join(\".\");\n            }\n          } else if (! _.isEmpty(val)) {\n            extract_multiline(path.concat(key), val, multiline);\n          }\n        }, this);\n      }\n      \n      var path = [], multiline = [];\n      extract_multiline(path, disp_doc, multiline);\n      var json = JSON.stringify(disp_doc, null, 2);\n      _.extend(ctx, {\n        \"title\": doc.env.page.title,\n        \"json\": json,\n        \"multiline\": multiline\n      });\n    \n      ctx.inline_styles = mustache.to_html(this.tdoc.styles, ctx);\n      return mustache.to_html(this.tdoc.page, ctx);\n    }\n  };\n})(this);"
}